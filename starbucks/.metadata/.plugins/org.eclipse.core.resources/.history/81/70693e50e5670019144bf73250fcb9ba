

package starbucks;

import static org.junit.Assert.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class AdditionalTestCases
{

    IApp app ;

    public AdditionalTestCases()
    {
    }

    @Before
    public void setUp()
    {
        app = new AppAuthProxy() ;  
    }

   /** This function will test for invalid pin message */ 
    @Test
    public void MyTestCase1()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(1,5) ;
        app.touch(1,5) ;
        app.touch(1,5) ;
        app.touch(1,6) ;
        app.display() ;
        lines = app.screenContents().split("\n"); 
        assertEquals("Invalid Pin", lines[3].trim());
    }
    
    /** 
     * This function will test Backspace functionality on PinScreen 
     * Special case when user enters backspace as first digit
     */ 
    @Test
    public void MyTestCase2()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(3,8) ; //Backspace
        app.display() ;
        lines = app.screenContents().split("\n"); 
        assertEquals("[_][_][_][_]", lines[5].trim());
    }
    
    /** 
     * This function will test Empty Character functionality on PinScreen 
     */
    @Test
    public void MyTestCase3()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(1,5) ;
        app.touch(2,5) ;
        app.touch(3,5) ;
        app.touch(1,8);  //Empty Character
        app.display() ;
        lines = app.screenContents().split("\n"); 
        assertEquals("[*][*][*][_]", lines[5].trim());
    }
    
    /** Next should clear the screen if digits of card number less than 9 */
    @Test
    public void MyTestCase4()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(1,5) ;
        app.touch(2,5) ;
        app.touch(3,5) ;
        app.touch(1,6) ;
        app.execute("E") ; // Settings Page
        assertEquals("Settings", app.screen());
        app.touch(1,1) ; // Add New Card
        assertEquals("AddCard", app.screen());
        // Card Id digits
        app.touch(1,5); // 1
        app.touch(2,5); // 2
        app.touch(3,5); // 3
        app.touch(1,6); // 4
        app.touch(2,6); // 5
        app.touch(2,3); // focus on card code
        // check digit entry
        app.display() ;
        lines = app.screenContents().split("\n"); 
        assertEquals("[12345]", lines[4].trim());
        // add card - see balance
        app.next() ;    
        app.display() ;
        lines = app.screenContents().split("\n"); 
        assertEquals("[]", lines[4].trim());  
    }
    
    /** Check functionality of backspace while adding card number*/
    @Test
    public void MyTestCase5()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(1,5) ;
        app.touch(2,5) ;
        app.touch(3,5) ;
        app.touch(1,6) ;
        app.execute("E") ; // Settings Page
        assertEquals("Settings", app.screen());
        app.touch(1,1) ; // Add New Card
        assertEquals("AddCard", app.screen());
        // Card Id digits
        app.touch(1,5); // 1
        app.touch(2,5); // 2
        app.touch(3,5); // 3
        app.touch(3,8); // backspace
        app.touch(1,6); // 4
        app.touch(2,6); // 5
        app.touch(3,6); // 6
        app.touch(1,7); // 7
        app.touch(2,7); // 8
        app.touch(3,8); // backspace
        // check digit entry
        app.display() ;
        lines = app.screenContents().split("\n"); 
        assertEquals("[124567]", lines[4].trim());
    }

    /** Next should clear the screen if digits of card code less than 3 */
    @Test
    public void MyTestCase6()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(1,5) ;
        app.touch(2,5) ;
        app.touch(3,5) ;
        app.touch(1,6) ;
        app.execute("E") ; // Settings Page
        assertEquals("Settings", app.screen());
        app.touch(1,1) ; // Add New Card
        assertEquals("AddCard", app.screen());
        // Card Id digits
        app.touch(1,5); // 1
        app.touch(2,6); // 5
        app.touch(3,7); // 9
        app.touch(3,6); // 6
        app.touch(2,6); // 5
        app.touch(2,5); // 2
        app.touch(1,7); // 7
        app.touch(1,6); // 4
        app.touch(1,6); // 4
        app.touch(2,3); // focus on card code
        // Card Code digits
        app.touch(1,7); // 7
        app.touch(2,6); // 5
        // check digit entry
        app.next();
        app.display() ;
        lines = app.screenContents().split("\n");  
        assertEquals("[]", lines[4].trim());
        assertEquals("[]", lines[5].trim());
    }
    
    /** Check functionality of backspace while adding card code*/
    @Test
    public void MyTestCase7()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(1,5) ;
        app.touch(2,5) ;
        app.touch(3,5) ;
        app.touch(1,6) ;
        app.execute("E") ; // Settings Page
        assertEquals("Settings", app.screen());
        app.touch(1,1) ; // Add New Card
        assertEquals("AddCard", app.screen());
        // Card Id digits
        app.touch(1,5); // 1
        app.touch(2,6); // 5
        app.touch(3,7); // 9
        app.touch(3,6); // 6
        app.touch(2,6); // 5
        app.touch(2,5); // 2
        app.touch(1,7); // 7
        app.touch(1,6); // 4
        app.touch(1,6); // 4
        app.touch(2,3); // focus on card code
        // Card Code digits
        app.touch(3,8); // Backspace
        app.touch(2,6); // 5
        app.touch(1,7); // 7
        app.touch(3,8); //Backspace
        // check digit entry
        app.display() ;
        lines = app.screenContents().split("\n");  
        assertEquals("[159652744]", lines[4].trim());
        assertEquals("[5]", lines[5].trim());
    }
    
    /**
     *  This function will check for the focus 
     *  functionality of card code and number 
     */
    @Test
    public void MyTestCase8()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(1,5) ;
        app.touch(2,5) ;
        app.touch(3,5) ;
        app.touch(1,6) ;
        app.execute("E") ; // Settings Page
        assertEquals("Settings", app.screen());
        app.touch(1,1) ; // Add New Card
        assertEquals("AddCard", app.screen());
        // Card Id digits
        app.touch(1,5); // 1
        app.touch(2,6); // 5
        app.touch(3,7); // 9
        app.touch(3,6); // 6
        app.touch(2,3); //focus on card code
        app.touch(2,6); // 5
        app.touch(2,5); // 2
        app.touch(1,2); //focus on card number
        app.touch(1,7); // 7
        app.touch(3,8); // backspace
        app.touch(3,8); // backspace
        app.touch(2,3); //focus on card code
        app.touch(1,7); //7
        app.display() ;
        lines = app.screenContents().split("\n");  
        assertEquals("[159]", lines[4].trim());
        assertEquals("[527]", lines[5].trim());
    }
    
    
    /** this function will test prev() functionality */
    @Test
    public void MyTestCase9()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(1,5) ;
        app.touch(2,5) ;
        app.touch(3,5) ;
        app.touch(1,6) ;
        app.execute("E") ; // Settings Page
        assertEquals("Settings", app.screen());
        app.touch(1,1) ; // Add New Card
        assertEquals("AddCard", app.screen());
        // Card Id digits
        app.touch(1,5); // 1
        app.touch(2,5); // 2
        app.touch(3,5); // 3
        app.touch(1,6); // 4
        app.touch(2,6); // 5
        app.touch(2,3); // focus on card code
        // check digit entry
        app.display() ;
        lines = app.screenContents().split("\n"); 
        assertEquals("[12345]", lines[4].trim());
        // add card - see balance
        app.prev() ;    
        app.display() ;
        assertEquals("Settings", app.screen()); 
    }
    
  /** This function will test that Payment 
   *  should be 0.50 after paying 13 times
   */
    @Test
    public void MyTestCase10()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(1,5) ;
        app.touch(2,5) ;
        app.touch(3,5) ;
        app.touch(1,6) ;
        app.execute("E") ; // Settings Page
        assertEquals("Settings", app.screen());
        app.touch(1,1) ; // Add New Card
        assertEquals("AddCard", app.screen());
        // Card Id digits
        app.touch(3,7); 
        app.touch(2,7);
        app.touch(1,5);
        app.touch(1,6);
        app.touch(2,6);
        app.touch(3,6);
        app.touch(2,7);
        app.touch(2,7);
        app.touch(2,7);
        app.touch(2,3); // focus on card code
        // Card Code digits
        app.touch(3,7);
        app.touch(3,7);
        app.touch(3,7);
        // check digit entry
        lines = app.screenContents().split("\n"); 
        assertEquals("[981456888]", lines[4].trim());
        assertEquals("[999]", lines[5].trim());
        // add card - see balance
        app.next() ;    
        assertEquals("MyCards", app.screen());
        lines = app.screenContents().split("\n");  
        assertEquals("$20.00", lines[7].trim());    
        // switch to payment
        app.touch(3,3); 
        lines = app.screenContents().split("\n");  
        assertEquals("[981456888]", lines[6].trim());
        assertEquals("Scan Now", lines[9].trim());  
        // Make Payments
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(3,3); // switch to balance
        lines = app.screenContents().split("\n");  
        assertEquals("$0.50", lines[7].trim());         
    }
    
  /** This function will test that 
   *  Payment should not be made if 
   *  balance is lower than 1.50
   */
    @Test
    public void MyTestCase11()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(1,5) ;
        app.touch(2,5) ;
        app.touch(3,5) ;
        app.touch(1,6) ;
        app.execute("E") ; // Settings Page
        assertEquals("Settings", app.screen());
        app.touch(1,1) ; // Add New Card
        assertEquals("AddCard", app.screen());
        // Card Id digits
        app.touch(3,7); 
        app.touch(2,7);
        app.touch(1,5);
        app.touch(1,6);
        app.touch(2,6);
        app.touch(3,6);
        app.touch(2,7);
        app.touch(2,7);
        app.touch(2,7);
        app.touch(2,3); // focus on card code
        // Card Code digits
        app.touch(3,7);
        app.touch(3,7);
        app.touch(3,7);
        // check digit entry
        lines = app.screenContents().split("\n"); 
        assertEquals("[981456888]", lines[4].trim());
        assertEquals("[999]", lines[5].trim());
        // add card - see balance
        app.next() ;    
        assertEquals("MyCards", app.screen());
        lines = app.screenContents().split("\n");  
        assertEquals("$20.00", lines[7].trim());    
        // switch to payment
        app.touch(3,3); 
        lines = app.screenContents().split("\n");  
        assertEquals("[981456888]", lines[6].trim());
        assertEquals("Scan Now", lines[9].trim());  
        // Make Payments
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(2,2);  // Pay $1.50
        app.touch(3,3); // switch to balance
        lines = app.screenContents().split("\n");  
        assertEquals("$0.50", lines[7].trim());         
    }
    
    @Test
    public void MyTestCase12()
    {
        String[] lines ;
        assertEquals("PinScreen", app.screen());
        app.touch(1,5) ;  // 1
        app.touch(2,5) ;  // 2
        app.touch(3,5) ;  // 3
        app.touch(1,6) ;  // 4
        assertEquals("MyCards", app.screen());
        app.next();
        lines = app.screenContents().split("\n");  
        assertEquals("$0.0", lines[7].trim()); 
    }
    
    
    @After
    public void tearDown()
    {
    }
}
